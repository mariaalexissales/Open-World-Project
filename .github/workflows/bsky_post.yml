name: Post Commit to Bsky

on:
  push:
    branches: [main, master]

jobs:
  bsky:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip social]') }}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Bluesky SDK
        run: |
          npm init -y >/dev/null 2>&1
          npm install @atproto/api

      - name: Post head commit to Bluesky
        env:
          BSKY_HANDLE: ${{ secrets.BSKY_HANDLE }}
          BSKY_APP_PASSWORD: ${{ secrets.BSKY_APP_PASSWORD }}
        run: |
          node - <<'NODE'
          const { BskyAgent, RichText } = require('@atproto/api');

          const evt = require(process.env.GITHUB_EVENT_PATH);
          const repo = process.env.GITHUB_REPOSITORY;
          const branch = process.env.GITHUB_REF_NAME;
          const sha = process.env.GITHUB_SHA;
          const commitUrl = `https://github.com/${repo}/commit/${sha}`;
          const repoUrl = `https://github.com/${repo}`;

          const head = evt.head_commit || {};
          const rawMsg = (head.message || '').replace(/\r\n/g, '\n').trim();
          const [subjectLine, ...restLines] = rawMsg.split('\n');
          const subject = (subjectLine || '').trim();
          const body = restLines.join('\n').trim();

          const agent = new BskyAgent({ service: 'https://bsky.social' });
          const MAX = 300;

          async function chunkText(text) {
            if (!text) return [];
            const chunks = [];
            let current = '';
            for (const token of text.split(' ')) {
              const candidate = current ? current + ' ' + token : token;
              const rt = new RichText({ text: candidate });
              await rt.detectFacets(agent);
              if (rt.graphemeLength <= MAX) {
                current = candidate;
              } else {
                if (current) chunks.push(current);
                const rtWord = new RichText({ text: token });
                await rtWord.detectFacets(agent);
                if (rtWord.graphemeLength > MAX) {
                  let s = token;
                  while (s.length) {
                    chunks.push(s.slice(0, MAX));
                    s = s.slice(MAX);
                  }
                  current = '';
                } else {
                  current = token;
                }
              }
            }
            if (current) chunks.push(current);
            return chunks;
          }

          (async () => {
            try {
              await agent.login({
                identifier: process.env.BSKY_HANDLE,
                password: process.env.BSKY_APP_PASSWORD,
              });

              let rootText = `Push made to \`${repo}\`: \`${subject || '(no message)'}\``;
              let rt = new RichText({ text: rootText });
              await rt.detectFacets(agent);
              if (rt.graphemeLength > MAX) {
                const prefix = `Push made to \`${repo}\`: \``;
                const suffix = '`';
                const room = MAX - (prefix.length + suffix.length) - 1;
                const trimmed = (subject || '(no message)').slice(0, Math.max(room, 0)) + 'â€¦';
                rootText = `${prefix}${trimmed}${suffix}`;
              }

              const rootRes = await agent.post({
                $type: 'app.bsky.feed.post',
                text: rootText,
                embed: {
                  $type: 'app.bsky.embed.external',
                  external: {
                    uri: commitUrl,
                    title: `Commit on ${repo}@${branch}`,
                    description: subject || '(no message)'
                  }
                },
                createdAt: new Date().toISOString(),
              });
              console.log('Root post:', rootRes.data.uri);

              const repoCard = await agent.post({
                $type: 'app.bsky.feed.post',
                text: `Repository: ${repo}`,
                embed: {
                  $type: 'app.bsky.embed.external',
                  external: {
                    uri: repoUrl,
                    title: `Repository: ${repo}`,
                    description: `GitHub repository for ${repo}`
                  }
                },
                reply: {
                  root: { uri: rootRes.data.uri, cid: rootRes.data.cid },
                  parent: { uri: rootRes.data.uri, cid: rootRes.data.cid },
                },
                createdAt: new Date().toISOString(),
              });
              console.log('Repo card reply:', repoCard.data.uri);

              if (body) {
                const chunks = await chunkText(`Commit message:\n${body}`);
                let parent = repoCard;
                for (const chunk of chunks) {
                  const res = await agent.post({
                    $type: 'app.bsky.feed.post',
                    text: chunk,
                    reply: {
                      root: { uri: rootRes.data.uri, cid: rootRes.data.cid },
                      parent: { uri: parent.data.uri, cid: parent.data.cid },
                    },
                    createdAt: new Date().toISOString(),
                  });
                  console.log('Commit body reply:', res.data.uri);
                  parent = res;
                }
              }
            } catch (e) {
              console.error('Bluesky post failed:', e?.message || e);
              process.exitCode = 0;
            }
          })();
          NODE
